package main

// Срезы
// Срез это часть массива. Как и массивы, срезы индексируются и имеют длину.
// В отличии от массивов их длину можно изменить. Вот пример среза:
// var x []float64

// Единственное отличие объявления среза от объявления массива —
// отсутствие указания длины в квадратных скобках. В нашем случае x будет иметь длину 0.
// Срез создается встроенной функцией make:

// x := make([] float64, 5)
// Этот код создаст срез, который связан с массивом типа float64, длиной 5.
// Срезы всегда связаны с каким-нибудь массивом. Они не могут стать больше чем массив,
// а вот меньше — пожалуйста. Функция make принимает и третий параметр:
// x := make([] float64, 5, 10)
// 10 — это длина массива, на который указывает срез

// Другой способ создать срез — использовать выражение [low : high]:

// arr := [5]float64{1,2,3,4,5}
// x := arr[0:5]

// Функции срезов

// В Go есть две встроенные функции для срезов: append и copy. Вот пример работы функции append:
// func main() {
//    slice1 := []int{1,2,3}
//    slice2 := append(slice1, 4, 5)
//    fmt.Println(slice1, slice2)
// }
// После выполнения программы slice1 будет содержать [1,2,3],
// а slice2 — [1,2,3,4,5]. append создает новый срез из уже существующего
// (первый аргумент) и добавляет к нему все следующие аргументы.

//Пример работы copy:

// func main() {
//    slice1 := []int{1,2,3}
//    slice2 := make([]int, 2)
//    copy(slice2, slice1)
//    fmt.Println(slice1, slice2)
// }

// После выполнения этой программы slice1 будет содержать [1,2,3],
// а slice2 — [1,2]. Содержимое slice1 копируется в slice2, но поскольку
// в slice2 есть место только для двух элементов,
// то только два первых элемента slice1 будут скопированы.
